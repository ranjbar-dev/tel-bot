// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package sql_gen

import (
	"context"
)

const allUsers = `-- name: AllUsers :many
SELECT chat_id, name, created_at FROM users
`

func (q *Queries) AllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.allUsersStmt, allUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ChatID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE chat_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, chatID int64) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, chatID)
	return err
}

const findUser = `-- name: FindUser :one
SELECT chat_id, name, created_at FROM users WHERE chat_id = ?
`

func (q *Queries) FindUser(ctx context.Context, chatID int64) (User, error) {
	row := q.queryRow(ctx, q.findUserStmt, findUser, chatID)
	var i User
	err := row.Scan(&i.ChatID, &i.Name, &i.CreatedAt)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (chat_id, name, created_at) VALUES (?, ?, ?)
RETURNING chat_id, name, created_at
`

type InsertUserParams struct {
	ChatID    int64
	Name      string
	CreatedAt int64
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.queryRow(ctx, q.insertUserStmt, insertUser, arg.ChatID, arg.Name, arg.CreatedAt)
	var i User
	err := row.Scan(&i.ChatID, &i.Name, &i.CreatedAt)
	return i, err
}

const updateUserInformation = `-- name: UpdateUserInformation :one
UPDATE users SET name = ? WHERE chat_id = ? 
RETURNING chat_id, name, created_at
`

type UpdateUserInformationParams struct {
	Name   string
	ChatID int64
}

func (q *Queries) UpdateUserInformation(ctx context.Context, arg UpdateUserInformationParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserInformationStmt, updateUserInformation, arg.Name, arg.ChatID)
	var i User
	err := row.Scan(&i.ChatID, &i.Name, &i.CreatedAt)
	return i, err
}
